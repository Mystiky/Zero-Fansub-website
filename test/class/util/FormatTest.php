<?php

require_once dirname(__FILE__) . '/../../../class/util/Format.php';
require_once dirname(__FILE__) . '/../../../class/util/BBCodeParser.php';
require_once dirname(__FILE__) . '/../../../class/util/StringExploder.php';

/**
 * Test class for Format.
 * Generated by PHPUnit on 2012-06-17 at 19:28:28.
 */
class FormatTest extends PHPUnit_Framework_TestCase {

    public function testTruncateText() {
        $this->assertEquals("...", Format::truncateText("abc def ghijk lmno", 3));
        $this->assertEquals("abc def...", Format::truncateText("abc def ghijk lmno", 10));
        $this->assertEquals("abc def...", Format::truncateText("abc def ghijk lmno", 11));
        $this->assertEquals("abc def...", Format::truncateText("abc def ghijk lmno", 12));
        $this->assertEquals("abc def ghijk lmno", Format::truncateText("abc def ghijk lmno", 50));
    }

    public function testConvertTextToHtml() {
        $this->assertEquals("", Format::convertTextToHtml(""));
        $this->assertEquals("test", Format::convertTextToHtml("test"));
        $this->assertEquals("&lt;script&gt;...&lt;/script&gt;", Format::convertTextToHtml("<script>...</script>"));
    }

    public function testFormatSize() {
        $this->assertEquals("100 octets", Format::formatSize(100));
        $this->assertEquals("1000 octets", Format::formatSize(1000));
        $this->assertEquals("9.77 kio", Format::formatSize(10000));
        $this->assertEquals("97.66 kio", Format::formatSize(100000));
        $this->assertEquals("976.56 kio", Format::formatSize(1000000));
        $this->assertEquals("9.54 Mio", Format::formatSize(10000000));
        $this->assertEquals("95.37 Mio", Format::formatSize(100000000));
        $this->assertEquals("953.67 Mio", Format::formatSize(1000000000));
        $this->assertEquals("9.31 Gio", Format::formatSize(10000000000));
    }

    public function testArrayToString() {
        $this->assertEquals("", Format::arrayToString(array()));
        $this->assertEquals("a", Format::arrayToString(array("a")));
        $this->assertEquals("a, b", Format::arrayToString(array("a", "b")));
        $this->assertEquals("a, b, c", Format::arrayToString(array("a", "b", "c")));
        $this->assertEquals("abc", Format::arrayToString(array("a", "b", "c"), null));
        $this->assertEquals("a/b/c", Format::arrayToString(array("a", "b", "c"), "/"));
    }

    public function testTrimAndCleanArray() {
        $this->assertEquals(array(), Format::trimAndCleanArray(array()));
        $this->assertEquals(array("a"), Format::trimAndCleanArray(array("a")));
        $this->assertEquals(array("a", "b"), Format::trimAndCleanArray(array("a", "b")));
        $this->assertEquals(array("a", "b"), Format::trimAndCleanArray(array("a", null, "b")));
        $this->assertEquals(array("a", "b"), Format::trimAndCleanArray(array("a ", null, " b")));
        $this->assertEquals(array("a", "b"), Format::trimAndCleanArray(array("   ", "a ", null, " b")));
    }

    public function testParseBBCode() {
        $this->assertEquals("", Format::parseBBCode(""));
        $this->assertEquals("test", Format::parseBBCode("test"));
        $this->assertEquals("<b>test</b>", Format::parseBBCode("[b]test[/b]"));
        // TODO complete
    }
}

?>
